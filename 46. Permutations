Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]



Solutions：


class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        #这道题主要就是用到recursion的思想，对于每个数，我们都要把剩余所有数随机组合后，放到它的后面
        #所有很自然的就要用到递归
        #base case
        if len(nums) <= 1:
            return [nums]
        
        res = []
        #nums里面每个数字都要遍历一遍，这里是挑选每个数字来当头部
        #然后在剩下的数字里面（包括前面的数字），任意组合
        #这里用到enumerate可以同时提取list里面的index和value，比较方便
        for i, num in enumerate(nums):
            #第一件事，就是计算出nums里面除了当前这个数字以外的其他所有数
            n = nums[:i] + nums[i + 1:]
            #然后就要对这些数进行recursion，算出所有的排列组合
            for j in self.permute(n):
                #对于每个可能的组合，都要放到当前值num后面（不是nums）
                #注意这里要用append，而不是直接赋值，list加到list里面只能append或者extend
                res.append([num] + j)
        return res
