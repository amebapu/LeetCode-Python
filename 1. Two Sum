Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
 

第一种办法，暴力解法：
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums) - 1):
            for j in range(i + 1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i,j]
                    
 两个for loop，space: O(1) time: O(N^2), 适合初学者练手，第一个loop可以用减1，因为最后那个数已经在前面每次被检查过了，可以加快一溜溜速度；
 
 第二种办法，最快办法，用dictionary：
 
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        buff_dict = {}
        
        for i, num in enumerate(nums):
            if target - num in buff_dict:
                return [buff_dict[target - num], i]
            else:
                buff_dict[num] = i
新建一个buff_dict的dictionary，用来临时储存，然后用enumerate来过一遍nums这个list，就会把list里面的值分成i(index)和num(value)一个个的pair；
循环的同时，把我们前面每个值达到target所缺失的value输入进dict，到后面就能一下找到那个值，这样就配对成功；这里的小trick，就是把index当做dictionary
里面的value，而value变成了dictionary里面的key，这样会方便寻找我们需要的那个key；
 
