Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}







Solution：


class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        #这道题题目也太长了，其实就是叫我们in place的在这个list上面把等于target的数字放到list的最后，其他数字不改变顺序，就这么简单
        #那这里我们用两个指针，一个从头开始，一个从屁股开始，这样对着走，看不顺眼就swap，一直到两个指针错开就好了
        #最后指针停止的时候，右指针在左边，这样每个element都检查了一遍，并且右指针的位置一定是最后一个不是target的值
        #那么返回右指针index + 1就是lenth了
        l, r = 0, len(nums) - 1
        
        while l <= r:
            if nums[l] == val:
                #python的swap就是方便啊
                nums[l], nums[r] = nums[r], nums[l]
                r -= 1
            if nums[l] != val:
                l += 1
        return r + 1
